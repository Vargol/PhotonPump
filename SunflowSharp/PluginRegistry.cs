// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using SunflowSharp.Core;
using SunflowSharp.Core.Accel;
using SunflowSharp.Core.Bucket;
using SunflowSharp.Core.Camera;
using SunflowSharp.Core.Filter;
using SunflowSharp.Core.Gi;
using SunflowSharp.Core.Light;
using SunflowSharp.Core.Modifiers;
using SunflowSharp.Core.Parser;
using SunflowSharp.Core.PhotonMap;
using SunflowSharp.Core.Primitive;
using SunflowSharp.Core.Renderer;
using SunflowSharp.Core.Shader;
using SunflowSharp.Core.Tesselatable;
using SunflowSharp.Image;
using SunflowSharp.Image.Readers;
using SunflowSharp.Image.Writers;
using SunflowSharp.Systems;


namespace SunflowSharp
{
	/**
* This class acts as the central repository for all user extensible types in
* Sunflow, even built-in types are registered here. This class is static so
* that new plugins may be reused by an application across several render
* scenes.
*/
	public class PluginRegistry {
		// base types - needed by SunflowAPI
		public static Plugins<PrimitiveList> primitivePlugins = new Plugins<PrimitiveList>(typeof(PrimitiveList));
		public static Plugins<ITesselatable> tesselatablePlugins = new Plugins<ITesselatable>(typeof(ITesselatable));
		public static Plugins<IShader> shaderPlugins = new Plugins<IShader>(typeof(IShader));
		public static Plugins<Modifier> modifierPlugins = new Plugins<Modifier>(typeof(Modifier));
		public static Plugins<LightSource> lightSourcePlugins = new Plugins<LightSource>(typeof(LightSource));
		public static Plugins<CameraLens> cameraLensPlugins = new Plugins<CameraLens>(typeof(CameraLens));
		
		// advanced types - used inside the Sunflow core
		public static Plugins<AccelerationStructure> accelPlugins = new Plugins<AccelerationStructure>(typeof(AccelerationStructure));
		public static Plugins<BucketOrder> bucketOrderPlugins = new Plugins<BucketOrder>(typeof(BucketOrder));
		public static Plugins<IFilter> filterPlugins = new Plugins<IFilter>(typeof(IFilter));
		public static Plugins<GIEngine> giEnginePlugins = new Plugins<GIEngine>(typeof(GIEngine));
		public static Plugins<CausticPhotonMapInterface> causticPhotonMapPlugins = new Plugins<CausticPhotonMapInterface>(typeof(CausticPhotonMapInterface));
		public static Plugins<GlobalPhotonMapInterface> globalPhotonMapPlugins = new Plugins<GlobalPhotonMapInterface>(typeof(GlobalPhotonMapInterface));
		public static Plugins<ImageSampler> imageSamplerPlugins = new Plugins<ImageSampler>(typeof(ImageSampler));
		public static Plugins<SceneParser> parserPlugins = new Plugins<SceneParser>(typeof(SceneParser));
		public static Plugins<BitmapReader> bitmapReaderPlugins = new Plugins<BitmapReader>(typeof(BitmapReader));
		public static Plugins<BitmapWriter> bitmapWriterPlugins = new Plugins<BitmapWriter>(typeof(BitmapWriter));

		// Register all plugins on startup:
		static PluginRegistry() {
			// primitives
			primitivePlugins.registerPlugin("triangle_mesh", typeof(TriangleMesh));
			primitivePlugins.registerPlugin("sphere", typeof(Sphere));
			primitivePlugins.registerPlugin("cylinder", typeof(Cylinder));
			primitivePlugins.registerPlugin("box", typeof(Box));
			primitivePlugins.registerPlugin("banchoff", typeof(BanchoffSurface));
			primitivePlugins.registerPlugin("hair", typeof(Hair));
			primitivePlugins.registerPlugin("julia", typeof(JuliaFractal));
			primitivePlugins.registerPlugin("particles", typeof(ParticleSurface));
			primitivePlugins.registerPlugin("plane", typeof(Plane));
			primitivePlugins.registerPlugin("quad_mesh", typeof(QuadMesh));
			primitivePlugins.registerPlugin("torus", typeof(Torus));
			primitivePlugins.registerPlugin("background", typeof(Background));
			primitivePlugins.registerPlugin("sphereflake", typeof(SphereFlake));

			// tesslatable
			tesselatablePlugins.registerPlugin("bezier_mesh", typeof(BezierMesh));
			tesselatablePlugins.registerPlugin("file_mesh", typeof(FileMesh));
			tesselatablePlugins.registerPlugin("gumbo", typeof(Gumbo));
			tesselatablePlugins.registerPlugin("teapot", typeof(Teapot));

			// shaders
			shaderPlugins.registerPlugin("ambient_occlusion", typeof(AmbientOcclusionShader));
			shaderPlugins.registerPlugin("constant", typeof(ConstantShader));
			shaderPlugins.registerPlugin("diffuse", typeof(DiffuseShader));
			shaderPlugins.registerPlugin("glass", typeof(GlassShader));
			shaderPlugins.registerPlugin("mirror", typeof(MirrorShader));
			shaderPlugins.registerPlugin("phong", typeof(PhongShader));
			shaderPlugins.registerPlugin("shiny_diffuse", typeof(ShinyDiffuseShader));
			shaderPlugins.registerPlugin("uber", typeof(UberShader));
			shaderPlugins.registerPlugin("ward", typeof(AnisotropicWardShader));
			shaderPlugins.registerPlugin("wireframe", typeof(WireframeShader));
			
			// textured shaders
			shaderPlugins.registerPlugin("textured_ambient_occlusion", typeof(TexturedAmbientOcclusionShader));
			shaderPlugins.registerPlugin("textured_diffuse", typeof(TexturedDiffuseShader));
			shaderPlugins.registerPlugin("textured_phong", typeof(TexturedPhongShader));
			shaderPlugins.registerPlugin("textured_shiny_diffuse", typeof(TexturedShinyDiffuseShader));
			shaderPlugins.registerPlugin("textured_ward", typeof(TexturedWardShader));
			
			// preview shaders
			shaderPlugins.registerPlugin("quick_gray", typeof(QuickGrayShader));
			shaderPlugins.registerPlugin("simple", typeof(SimpleShader));
			shaderPlugins.registerPlugin("show_normals", typeof(NormalShader));
			shaderPlugins.registerPlugin("show_uvs", typeof(UVShader));
			shaderPlugins.registerPlugin("show_instance_id", typeof(IDShader));
			shaderPlugins.registerPlugin("show_primitive_id", typeof(PrimIDShader));
			shaderPlugins.registerPlugin("view_caustics", typeof(ViewCausticsShader));
			shaderPlugins.registerPlugin("view_global", typeof(ViewGlobalPhotonsShader));
			shaderPlugins.registerPlugin("view_irradiance", typeof(ViewIrradianceShader));


			// modifiers
			modifierPlugins.registerPlugin("bump_map", typeof(BumpMappingModifier));
			modifierPlugins.registerPlugin("normal_map", typeof(NormalMapModifier));
			modifierPlugins.registerPlugin("perlin", typeof(PerlinModifier));

			// light sources
			lightSourcePlugins.registerPlugin("directional", typeof(DirectionalSpotlight));
			lightSourcePlugins.registerPlugin("ibl", typeof(ImageBasedLight));
			lightSourcePlugins.registerPlugin("point", typeof(PointLight));
			lightSourcePlugins.registerPlugin("sphere", typeof(SphereLight));
			lightSourcePlugins.registerPlugin("sunsky", typeof(SunSkyLight));
			lightSourcePlugins.registerPlugin("triangle_mesh", typeof(TriangleMeshLight));
			lightSourcePlugins.registerPlugin("cornell_box", typeof(CornellBox));

			// camera lenses
			cameraLensPlugins.registerPlugin("pinhole", typeof(PinholeLens));
			cameraLensPlugins.registerPlugin("thinlens", typeof(ThinLens));
			cameraLensPlugins.registerPlugin("fisheye", typeof(FisheyeLens));
			cameraLensPlugins.registerPlugin("spherical", typeof(SphericalLens));

			// accels
			accelPlugins.registerPlugin("bih", typeof(BoundingIntervalHierarchy));
			accelPlugins.registerPlugin("kdtree", typeof(KDTree));
			accelPlugins.registerPlugin("null", typeof(NullAccelerator));
			accelPlugins.registerPlugin("uniformgrid", typeof(UniformGrid));

			// bucket orders
			bucketOrderPlugins.registerPlugin("column", typeof(ColumnBucketOrder));
			bucketOrderPlugins.registerPlugin("diagonal", typeof(DiagonalBucketOrder));
			bucketOrderPlugins.registerPlugin("hilbert", typeof(HilbertBucketOrder));
			bucketOrderPlugins.registerPlugin("random", typeof(RandomBucketOrder));
			bucketOrderPlugins.registerPlugin("row", typeof(RowBucketOrder));
			bucketOrderPlugins.registerPlugin("spiral", typeof(SpiralBucketOrder));

			// filters
			filterPlugins.registerPlugin("blackman-harris", typeof(BlackmanHarrisFilter));
			filterPlugins.registerPlugin("box", typeof(BoxFilter));
			filterPlugins.registerPlugin("catmull-rom", typeof(CatmullRomFilter));
			filterPlugins.registerPlugin("gaussian", typeof(GaussianFilter));
			filterPlugins.registerPlugin("lanczos", typeof(LanczosFilter));
			filterPlugins.registerPlugin("mitchell", typeof(MitchellFilter));
			filterPlugins.registerPlugin("sinc", typeof(SincFilter));
			filterPlugins.registerPlugin("triangle", typeof(TriangleFilter));
			filterPlugins.registerPlugin("bspline", typeof(CubicBSpline));

			// gi engines
			giEnginePlugins.registerPlugin("ambocc", typeof(AmbientOcclusionGIEngine));
			giEnginePlugins.registerPlugin("fake", typeof(FakeGIEngine));
			giEnginePlugins.registerPlugin("igi", typeof(InstantGI));
			giEnginePlugins.registerPlugin("irr-cache", typeof(IrradianceCacheGIEngine));
			giEnginePlugins.registerPlugin("path", typeof(PathTracingGIEngine));

			// caustic photon maps
			causticPhotonMapPlugins.registerPlugin("kd", typeof(CausticPhotonMap));

			// global photon maps
			globalPhotonMapPlugins.registerPlugin("grid", typeof(GridPhotonMap));
			globalPhotonMapPlugins.registerPlugin("kd", typeof(GlobalPhotonMap));

			// image samplers
			imageSamplerPlugins.registerPlugin("bucket", typeof(BucketRenderer));
			imageSamplerPlugins.registerPlugin("ipr", typeof(ProgressiveRenderer));
			imageSamplerPlugins.registerPlugin("fast", typeof(SimpleRenderer));
			imageSamplerPlugins.registerPlugin("multipass", typeof(MultipassRenderer));

			// parsers
			parserPlugins.registerPlugin("gz", typeof(ScGzParser));
			parserPlugins.registerPlugin("sc", typeof(SCParser));
			parserPlugins.registerPlugin("rib", typeof(ShaveRibParser));
			parserPlugins.registerPlugin("ra2", typeof(RA2Parser));
			parserPlugins.registerPlugin("ra3", typeof(RA3Parser));

			bitmapReaderPlugins.registerPlugin("hdr", typeof(HDRBitmapReader));
			bitmapReaderPlugins.registerPlugin("tga", typeof(TGABitmapReader));
			bitmapReaderPlugins.registerPlugin("png", typeof(SystemBitmapReader));
			bitmapReaderPlugins.registerPlugin("jpg", typeof(SystemBitmapReader));
			bitmapReaderPlugins.registerPlugin("bmp", typeof(SystemBitmapReader));
			bitmapReaderPlugins.registerPlugin("igi", typeof(IGIBitmapReader));

            bitmapWriterPlugins.registerPlugin("exr", typeof(EXRBitmapWriter));
            bitmapWriterPlugins.registerPlugin("hdr", typeof(HDRBitmapWriter));
			bitmapWriterPlugins.registerPlugin("tga", typeof(TGABitmapWriter));
			bitmapWriterPlugins.registerPlugin("png", typeof(SystemBitmapWriter));
			bitmapWriterPlugins.registerPlugin("jpg", typeof(SystemBitmapWriter));
			bitmapWriterPlugins.registerPlugin("bmp", typeof(SystemBitmapWriter));
			bitmapWriterPlugins.registerPlugin("igi", typeof(IGIBitmapWriter));

		}
	}
}

